@if(SelectedUser is null)
{
    <h2>Please select a user from the connected user list, to start a converstation</h2>
}
else
{
    <div class="flex-grow-1 d-flex flex-column">
        <div class="header d-flex justify-content-between bg-main" >
            <h2 class="text-white">@SelectedUser.Name</h2>
            <button class="btn btn-danger btn-sm" @onclick="HandleCancelClick">x</button>
        </div>
        <div class="messages-list flex-grow-1">

        </div>
        <div class="message-input">

            <EditForm Model="_newMessage">
                <div class="">
                    <div class="input-group d-flex justify-content-between ">
                        <InputText class="form-control" @bind-Value="_newMessage" placeholder="Enter message here..."/>

                        <button class="btn btn-success" type="submit">Send</button>
                    </div>
                </div>
            </EditForm>


        </div>
    </div>
}

@code {
    [Parameter]
    public UserDto? SelectedUser { get; set; }
    [Parameter]
    public EventCallback<bool> OnCancel { get; set; }

    private IList<string> _messages = new List<string>();
    private string _newMessage = "";



    private async Task HandleCancelClick()
    {
        var isUserHasMessages = _messages.Any();
        var shouldRemoveFromChatsList = !isUserHasMessages;
        await OnCancel.InvokeAsync(shouldRemoveFromChatsList);
    }
}
