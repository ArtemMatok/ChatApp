@inject IMessageService _messageService

@if (SelectedUser is null)
{
    <h2>Please select a user from the connected user list, to start a converstation</h2>
}
else
{
<div class="flex-grow-1 d-flex flex-column">
    <div class="header d-flex justify-content-between bg-main">
        <h4 class="text-white m-0 p-1">@SelectedUser.Name</h4>
        <button class="btn btn-danger btn-sm" @onclick="HandleCancelClick">x</button>
    </div>
    @if (!string.IsNullOrWhiteSpace(_errorMessage))
    {
        <div class="header d-flex justify-content-between bg-danger">
            <span class="text-white">@_errorMessage</span>
            <button class="btn btn-danger btn-sm" @onclick="() => _errorMessage = null">x</button>
        </div>
    }

    <div class="messages-list">
        <ul style="padding:5px;">
            @foreach (var item in _messages)
            {
                var incoming = item.ToUserId == _currentUserId;
                var outgoing = !incoming;
                var cls = $"justify-content-{(incoming ? "start" : "end")}";

                <li class="d-flex @cls">
                    <p class="single-msg @(incoming? "other": "me")">
                        @item.Message
                        <br />
                        <small class="msg-dt">
                            @if(item.SentOn.Date == DateTime.Today.Date)
                            {
                                <span>@item.SentOn.ToShortTimeString()</span>
                            }
                            else
                            {
                                var dateString = $"{item.SentOn.ToShortDateString()} | {item.SentOn.ToShortTimeString()}";
                                <span>@dateString</span>
                            }
                        </small>
                    </p>
                </li>
            }

        </ul>
    </div>
    <div class="message-input">

        <EditForm Model="_newMessage" OnValidSubmit="HandleSendMessageSubmit">
            <div class="">
                <div class="input-group d-flex justify-content-between ">
                    <InputText class="form-control" @bind-Value="_newMessage" placeholder="Enter message here..." />

                    <button class="btn btn-success" type="submit">Send</button>
                </div>
            </div>
        </EditForm>


    </div>
</div>
}

@code {
        [CascadingParameter(Name = "AuthenticationState")]
        public AuthenticationState AuthState { get; set; }

    [Parameter]
    public UserDto? SelectedUser { get; set; }
    [Parameter]
    public EventCallback<bool> OnCancel { get; set; }
    [Parameter]
    public MessageDto? NewIncomingMessage { get; set; }
    [Parameter]
    public EventCallback OnIncomingMessageReceived { get; set; }


    private IList<MessageDto> _messages = new List<MessageDto>();
    private string _newMessage = "";
    private string? _errorMessage = "";
    private int _previousSelectedUserId = 0;
    private int _currentUserId => AuthState?.User.Id ?? 0;

    protected override async Task OnParametersSetAsync()
    {
        if (NewIncomingMessage is not null)
        {
            _messages.Add(NewIncomingMessage);
            await OnIncomingMessageReceived.InvokeAsync();
        }
        if (SelectedUser is not null && SelectedUser.Id != _previousSelectedUserId)
        {
            _previousSelectedUserId = SelectedUser.Id;
            await LoadMessagesAsync();
        }
    }



    private async Task LoadMessagesAsync()
    {
        _messages.Clear();
        var allMessages = await _messageService.GetMessages(SelectedUser.Id);
        if (allMessages?.Any() == true)
        {
            _messages = allMessages.ToList();
            _errorMessage = null;
        }
        else
        {
            _errorMessage = $"There are not messages between you and {SelectedUser.Name}";
        }

    }


    private async Task HandleCancelClick()
    {
        var isUserHasMessages = _messages.Any();
        var shouldRemoveFromChatsList = !isUserHasMessages;
        await OnCancel.InvokeAsync(shouldRemoveFromChatsList);
    }

    private async Task HandleSendMessageSubmit()
    {
        if (SelectedUser is not null)
        {
            if (!string.IsNullOrWhiteSpace(_newMessage))
            {
                var sendMessageDto = new MessageSendDto(SelectedUser.Id, _newMessage);
                var response = await _messageService.SendMessage(sendMessageDto, AuthState);
                if(response)
                {
                    var messageDto = new MessageDto(SelectedUser.Id, AuthState.User.Id, _newMessage,DateTime.Now);
                    _messages.Add(messageDto);
                    _newMessage = "";
                    _errorMessage = null;

                }
                else
                {
                    _errorMessage = "Error sending message";
                }


            }
        }

    }
}
