@inject IPostService _postService
@inject IMediaAccountService _mediaAccountService
@inject ICommentService _commentService
@using TestChat.Client.Components.Post.CommentFold.Answer

@if (errorMessage.Length != 0)
{
    <h2>@errorMessage</h2>
}

@if (mediaAccount.Id != 0)
{
    <div class="comment-session">
        <div class="post-comment">
            @if (comments.Count == 0)
            {
                <h2>There aren`t any comments</h2>
            }
            @if (CountComments == "Part")
            {
                @foreach (var item in comments.OrderByDescending(x => x.Id).Take(15))
                {

                    <div class="comment-list-container">
                        <div class="comment-list">
                            <div class="flex">
                                <div class="user-comment">
                                    <div class="user-comment-image"><img class="img-comment" src="@item.MediaAccountPhoto" /></div>
                                    <div class="user-media">
                                        <div class="name-comment">@item.UserName</div>
                                    </div>
                                </div>
                                <div class="reply">
                                    <div @onclick="()=>LikeHandle(item.Id)"  class="lick icon-comment">@item.Likes.Count() <i class="uil uil-heart"></i></div>
                                </div>
                            </div>
                            <div class="comment">
                                @item.Content
                            </div>
                            <div class="delete-comment">
                                <svg @onclick="()=>ShowAnswerCommentComponent(item.Id)" style="cursor:pointer;" class="answer-comment" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="black" d="M5.455 15L1 18.5V3a1 1 0 0 1 1-1h15a1 1 0 0 1 1 1v12zm-.692-2H16V4H3v10.385zM8 17h10.237L20 18.385V8h1a1 1 0 0 1 1 1v13.5L17.546 19H9a1 1 0 0 1-1-1z" /></svg>
                                <p @onclick="()=>ShowAnswer(item)" style="color:grey; cursor:pointer;">See All Answers: @item.AnswerComments.Count()</p>
                                <svg @onclick="()=>ShowConfirmationAsync(item)" class="trash-comment" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 16 16"><path fill="black" d="M11 1.75V3h2.25a.75.75 0 0 1 0 1.5H2.75a.75.75 0 0 1 0-1.5H5V1.75C5 .784 5.784 0 6.75 0h2.5C10.216 0 11 .784 11 1.75M4.496 6.675l.66 6.6a.25.25 0 0 0 .249.225h5.19a.25.25 0 0 0 .249-.225l.66-6.6a.75.75 0 0 1 1.492.149l-.66 6.6A1.75 1.75 0 0 1 10.595 15h-5.19a1.75 1.75 0 0 1-1.741-1.575l-.66-6.6a.75.75 0 1 1 1.492-.15M6.5 1.75V3h3V1.75a.25.25 0 0 0-.25-.25h-2.5a.25.25 0 0 0-.25.25" /></svg>
                            </div>
                        </div>
                    </div>
                    @if (item.IsOpenAnswerComments)
                    {
                        @foreach (var answer in item.AnswerComments)
                        {

                            <div class="comment-list-container">
                                <div class="comment-answer-list">
                                    <div class="flex">
                                        <div class="user-comment">
                                            <div class="user-comment-image"><img class="img-comment" src="@answer.MediaAccountPhoto" /></div>
                                            <div class="user-media">
                                                <div class="name-comment">@answer.UserName</div>
                                            </div>
                                        </div>

                                    </div>
                                    <div class="comment">
                                        <b style="color:blue;">@@@item.UserName</b>, @answer.Content
                                    </div>

                                </div>
                            </div>
                        }

                    }

                }


            }
            else
            {
                @foreach (var item in comments)
                {


                    <div class="comment-list-container">
                        <div class="comment-list">
                            <div class="flex">
                                <div class="user-comment">
                                    <div class="user-comment-image"><img class="img-comment" src="@item.MediaAccountPhoto" /></div>
                                    <div class="user-media">
                                        <div class="name-comment">@item.UserName</div>
                                    </div>
                                </div>
                                <div class="reply">
                                    <div @onclick="()=>LikeHandle(item.Id)" class="lick icon-comment">@item.Likes.Count() <i class="uil uil-heart"></i></div>
                                </div>
                            </div>
                            <div class="comment">
                                @item.Content
                            </div>
                            <div class="delete-comment">
                                <svg @onclick="()=>ShowAnswerCommentComponent(item.Id)" style="cursor:pointer;" class="answer-comment" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="black" d="M5.455 15L1 18.5V3a1 1 0 0 1 1-1h15a1 1 0 0 1 1 1v12zm-.692-2H16V4H3v10.385zM8 17h10.237L20 18.385V8h1a1 1 0 0 1 1 1v13.5L17.546 19H9a1 1 0 0 1-1-1z" /></svg>
                                <p @onclick="()=>ShowAnswer(item)" style="color:grey; cursor:pointer;">See All Answers: @item.AnswerComments.Count()</p>
                                <svg @onclick="()=>ShowConfirmationAsync(item)" class="trash-comment" xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 16 16"><path fill="black" d="M11 1.75V3h2.25a.75.75 0 0 1 0 1.5H2.75a.75.75 0 0 1 0-1.5H5V1.75C5 .784 5.784 0 6.75 0h2.5C10.216 0 11 .784 11 1.75M4.496 6.675l.66 6.6a.25.25 0 0 0 .249.225h5.19a.25.25 0 0 0 .249-.225l.66-6.6a.75.75 0 0 1 1.492.149l-.66 6.6A1.75 1.75 0 0 1 10.595 15h-5.19a1.75 1.75 0 0 1-1.741-1.575l-.66-6.6a.75.75 0 1 1 1.492-.15M6.5 1.75V3h3V1.75a.25.25 0 0 0-.25-.25h-2.5a.25.25 0 0 0-.25.25" /></svg>
                            </div>
                        </div>
                    </div>
                    @if (item.IsOpenAnswerComments)
                    {
                        @foreach (var answer in item.AnswerComments)
                        {

                            <div class="comment-list-container">
                                <div class="comment-answer-list">
                                    <div class="flex">
                                        <div class="user-comment">
                                            <div class="user-comment-image"><img class="img-comment" src="@answer.MediaAccountPhoto" /></div>
                                            <div class="user-media">
                                                <div class="name-comment">@answer.UserName</div>
                                            </div>
                                        </div>

                                    </div>
                                    <div class="comment">
                                        @@@item.UserName, @answer.Content
                                    </div>

                                </div>
                            </div>
                        }

                    }
                }
            }

            <EditForm Model="comment" class="comment-box">
                <DataAnnotationsValidator />
                <div class="user-comment">
                    <div class="image-comment"><img class="img-comment" src="@mediaAccount.Photo" /></div>
                    <div class="name-comment">@mediaAccount.UserName</div>
                </div>
                <InputTextArea @bind-Value="contentComment" name="comment" class="textarea-comment"></InputTextArea>
                <h5 style="color:red;">@errContent</h5>
                <button class="comment-submit" @onclick="CommentHandler">Comment</button>
            </EditForm>
        </div>
    </div>
    <ConfirmDialog @ref="dialog" />
    <Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.TopCenter" AutoHide="true" Delay="6000" />

    <Modal @ref="modal" />
}
else
{
    <div class="d-flex justify-content-center">
        <Spinner Type="SpinnerType.Border" />
    </div>
}

@code{
    [Parameter]
    public int PostId { get; set; }
    [Parameter]
    public string MediaAccountUserName { get; set; }
    //скільки коментів показувати
    [Parameter]
    public string CountComments { get; set; }

    private Post post = new();
    private MediaAccount mediaAccount = new();
    private List<Comment> comments = new();
    private Comment comment = new();
    private string contentComment = "";
    private string errorMessage = "";
    private string errContent = "";
    private bool isLike;


    protected override async Task OnInitializedAsync()
    {

        await Load();
    }

    private async Task Load()
    {
        try
        {
            post = await _postService.GetPostById(PostId);
            mediaAccount = await _mediaAccountService.GetAccountByUserName(MediaAccountUserName);
            comments = await _commentService.GetCommentByPost(PostId);

        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task CommentHandler()
    {
        //comment.CommentSender = mediaAccount;
        if (contentComment == "")
        {
            errContent = "Please write comment";
        }
        else
        {
            errContent = "";
            var comment = new Comment(mediaAccount.UserName, mediaAccount.Photo, contentComment, PostId);
            post.Comments.Add(comment);
            contentComment = "";

            try
            {
                await _postService.UpdatePostByComment(PostId, comment);
                //обновити коменти в листу
                await Load();

            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
            }
        }


    }


    private async Task LikeHandle(int commentId)
    {
        var comment = await _commentService.GetCommentById(commentId);

        if(!comment.Likes.Any(x=>x.UserName == MediaAccountUserName))
        {
            comment.Likes.Add(new CommentLike()
            {
                UserName = MediaAccountUserName,
            });

        }
        else
        {
            var like = comment.Likes.FirstOrDefault(x => x.UserName == MediaAccountUserName);
            comment.Likes.Remove(like);
        }
        await _commentService.UpdateCommentByLike(commentId, comment);
        comments = await _commentService.GetCommentByPost(PostId);


    }






    #region DeleteComment

    private ConfirmDialog dialog = default!;

    private async Task ShowConfirmationAsync(Comment comment)
    {
        var confirmation = await dialog.ShowAsync(
            title: "Are you sure you want to delete this?",
            message1: "This will delete the record. Once deleted can not be rolled back.",
            message2: "Do you want to proceed?");

        if (confirmation)
        {
            // do something
            if (await _commentService.DeleteComment(comment.Id))
            {
                comments.Remove(comment);
            }
            else
            {
                ShowMessage(ToastType.Danger);
            }

        }
        else
        {
            // do something
        }
    }
    #endregion

    #region ErrorToast
    List<ToastMessage> messages = new List<ToastMessage>();

    private void ShowMessage(ToastType toastType) => messages.Add(CreateToastMessage(toastType));

    private ToastMessage CreateToastMessage(ToastType toastType)
    => new ToastMessage
    {
        Type = toastType,
        Message = $"Something went wrong...",
    };
    #endregion
    public string FormatNumberWithSpaces(int number)
    {
        return number.ToString("N0").Replace(",", " ");
    }

    #region AnswerComment
    private Modal modal = default!;

    private async Task ShowAnswerCommentComponent(int commentId)
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("CommentId", commentId);
        parameters.Add("PostId", PostId);
        parameters.Add("MediaAccountUserName", MediaAccountUserName);
        parameters.Add("OnCommentAdded", EventCallback.Factory.Create(this, OnCommentAdded));
        await modal.ShowAsync<AnswerCommentComponent>(title: "Employee Details", parameters: parameters);
    }
    #endregion

    private async Task OnCommentAdded()
    {
        await Load();
    }


    private void ShowAnswer(Comment comment)
    {
        comment.IsOpenAnswerComments = !comment.IsOpenAnswerComments;
    }
}