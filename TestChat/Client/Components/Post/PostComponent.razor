@inject IPostService _postService
@inject IMediaAccountService _mediaAccount

@if (errorMessage == null || errorMessage.Length == 0)
{
    <h2>@errorMessage</h2>
}
<div class="feed">
    <div class="head">
        <div class="user">
            <div class="profile-photo">
                <img src="@mediaAccount.Photo" alt="Alternate Text" />
            </div>
            <div class="ingo">
                <h3>@mediaAccount.FullName</h3>
                <small>Dubai, @(()=> TimeAgo(post.DateCreated))</small>
            </div>

        </div>
        <span class="edit">
            <i class="uil uil-ellipsis-h"></i>
        </span>
    </div>
    <div class="photo">
        <img src="@post.ImageUrl" alt="Alternate Text" />
    </div>

    <div class="action-buttons">
        <div class="interaction-buttons">
            <span><i class="uil uil-heart"></i></span>
            <span><i class="uil uil-comment-dots"></i></span>
            <span><i class="uil uil-share-alt"></i></span>
        </div>
        <div class="bookmark">
            <span><i class="uil uil-bookmark-full"></i></span>
        </div>
    </div>

    <div class="liked-by">
        <span><img src="https://i.ibb.co/DWz457P/profile-10.jpg" alt="Alternate Text" /></span>
        <span><img src="https://i.ibb.co/DWz457P/profile-10.jpg" alt="Alternate Text" /></span>
        <span><img src="https://i.ibb.co/DWz457P/profile-10.jpg" alt="Alternate Text" /></span>
        <p>Liked by <b>Ernest Achiever</b> and <b>2,323 others</b></p>
    </div>

    <div class="caption">
        <p><b>@mediaAccount.FullName </b>@post.Title</p>
    </div>
    <div class="comments text-muted">View all @(FormatNumberWithSpaces(post.Comments.Count())) comments</div>
</div>
@code {
    [Parameter]
    public int PostId { get; set; }
    [Parameter]
    public string MediaAccountUserName { get; set; }

    private Post post = new();
    private MediaAccount mediaAccount = new();
    private string errorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            post = await _postService.GetPostById(PostId);
            mediaAccount = await _mediaAccount.GetAccountByUserName(MediaAccountUserName);

        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }


    private  string TimeAgo(DateTime photoTime)
    {
        DateTime now = DateTime.Now;
        TimeSpan timeDifference = now - photoTime;

        if (timeDifference.TotalHours > 24)
        {
            int days = (int)timeDifference.TotalDays;
            return $"{days} day(s) ago";
        }
        else
        {
            int minutes = (int)timeDifference.TotalMinutes;
            return $"{minutes} minute(s) ago";
        }
    }

    private string FormatNumberWithSpaces(int number)
    {
        return number.ToString("N0").Replace(",", " ");
    }
}

