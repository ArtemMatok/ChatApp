@inherits LayoutComponentBase
@inject NavigationManager _navManager
@inject IJSRuntime JsRuntime
@using System.Text.Json
@implements IDisposable
@inject IMediaAccountService _mediaAccountService 


    <body>
        @Body
        
    </body>

@code{
    [CascadingParameter(Name = "AuthenticationState")]
    public AuthenticationState AuthState { get; set; }

    private MediaAccount mediaAccount = new();
    private bool isClicked = false;
    private string sizeActive = "4";
    private string colorActive = "1";

    protected override async Task OnInitializedAsync()
    {

        var authStateJson = await JsRuntime.InvokeAsync<string>("window.getFromStorage", AuthenticationState.AuthStoreKey);
        if (!string.IsNullOrWhiteSpace(authStateJson))
        {
            var authState = JsonConverter.Deserialize<AuthResponseDto>(authStateJson);
            AuthState.LoadState(authState);

            if (AuthState.IsAuthenticated)
            {
                _navManager.NavigateTo("/chat");
            }
        }

        AuthState.PropertyChanged += AuthenticationStateChanged;
        mediaAccount = await _mediaAccountService.GetAccountById(AuthState.User.Id);
        Console.WriteLine(mediaAccount.UserName);
    }

    private void AuthenticationStateChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(AuthState.IsAuthenticated))
        {
            if (AuthState.IsAuthenticated)
            {
                _navManager.NavigateTo("/chat");
            }
            else
            {
                _navManager.NavigateTo("/");
            }

        }
    }

    public void Dispose()
    {
        AuthState.PropertyChanged -= AuthenticationStateChanged;

    }




    

}