@page "/FindPage/{UserName}"
@inject IMediaAccountService _mediaAccountService



<div class="body-find-page">
    <div class="find-friends-container">
        <div class="find-friends-header">
            <div class="find-friends-heading">
                Find Friends
            </div>
            <div class="find-friends-search">
                <Icon class="serach-icon" Name="IconName.Search"></Icon>
                <input type="text" placeholder="Enter a friend`s name" />
            </div>
        </div>

        <div class="find-friends-body">
            @if (messageError.Length != 0)
            {
                <h4 style="color:red;">@messageError</h4>
            }
            @if (mediaAccounts.Count != 0)
            {
                foreach (var item in mediaAccounts)
                {
                    <div class="user-row">
                        <div class="user-info">
                            <img src="@item.Photo" alt="user" />
                            <span>@item.FullName </span>
                        </div>
                        @if (mediaAccountCurrent.Following.Any(x => x.UserName == item.UserName))
                        {
                            <div @onclick="()=>FollowHandle(item)" class="action-unfollow">
                                Unfollow
                            </div>

                        }
                        else
                        {

                            <div @onclick="()=>FollowHandle(item)" class="action-follow">
                                Follow
                            </div>
                        }

                    </div>
                }

            }
            else
            {
                <h4>No Accounts. Something went wrong...</h4>
            }
        </div>
    </div>
</div>

<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.TopCenter" AutoHide="true" Delay="6000" />

@code{
    [Parameter]
    public string UserName { get; set; }

    private MediaAccount mediaAccountCurrent = new MediaAccount();
    private List<MediaAccount> mediaAccounts = new();
    private string messageError = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await Load();
        }
        catch (Exception ex)
        {
            messageError = ex.Message;
        }
    }

    private async Task Load()
    {
        mediaAccounts = await _mediaAccountService.GetAllMediaAccountWithoutCurrent(UserName);

        mediaAccountCurrent = await _mediaAccountService.GetAccountByUserName(UserName);
    }

    private async Task FollowHandle(MediaAccount mediaAccountFollowing)
    {
        var result = await _mediaAccountService.UpdateMediaAccountByFolowAccount(UserName, mediaAccountFollowing);
        if(result)
        {

            Console.WriteLine("Success");
        }
        else
        {
            ShowMessage(ToastType.Danger);
        }
        await Load();

    }


    #region Toast Error
    List<ToastMessage> messages = new List<ToastMessage>();

    private void ShowMessage(ToastType toastType) => messages.Add(CreateToastMessage(toastType));

    private ToastMessage CreateToastMessage(ToastType toastType)
    => new ToastMessage
    {
        Type = toastType,
        Message = $"Something went wrong... Try again later",
    };
    #endregion

}