@page "/register"
@using TestChat.Shared.DTOs
@inject IAccountService _accountService
@inject NavigationManager _navManager 
@inject HttpClient _httpClient

<PageTitle>Register Blazing Chat</PageTitle>

<div class="container">
    <div class="row">
        <div class="col"></div>
        <div class="col">
            <h2>Blazing Chat - Register</h2>
            <EditForm Model="RegisterModel" OnValidSubmit="RegisterAsync">
                <DataAnnotationsValidator />
                @if (!string.IsNullOrWhiteSpace(errorMessage))
                {
                    <p class="text-danger">@errorMessage</p>
                }
                <div class="mb-3">
                    <InputText @bind-Value="RegisterModel.Name" DisplayName="Name" class="form-control" placeholder="Name"></InputText>
                    <ValidationMessage For="()=>RegisterModel.Name" />
                </div>
                <div class="mb-3">
                    <InputText @bind-Value="RegisterModel.UserName" DisplayName="UserName" class="form-control" placeholder="Username"></InputText>
                    <ValidationMessage For="()=>RegisterModel.UserName" />
                </div>
                <div class="mb-3">
                    <InputText type="password" @bind-Value="RegisterModel.Password" class="form-control" DisplayName="Password" placeholder="Password"></InputText>
                    <ValidationMessage For="()=>RegisterModel.Password" />
                </div>
                <div class="mb-3">
                    @if (_isBusy)
                    {
                        <button class="btn btn-success" type="button" disabled>
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="visually-hidden">Loading...</span>
                        </button>
                    }
                    else
                    {
                        <button type="submit" class="btn btn-success float-start">Register</button>
                    }
                    <NavLink Match="NavLinkMatch.All" href="/" class="btn btn-outline-primary float-end">Login</NavLink>
                    <div class="clearfix"></div>
                </div>
            </EditForm>
        </div>
        <div class="col"></div>
    </div>
</div>


@code{

    [CascadingParameter(Name = "AuthenticationState")]
    public AuthenticationState AuthenticationState { get; set; }

    private RegisterDto RegisterModel { get; set; } = new();
    private bool _isBusy = false;
    private string? errorMessage = null;
    private async Task RegisterAsync()
    {
        try
        {
            _isBusy = true;
            errorMessage = null;
            var response = await _httpClient.PostAsJsonAsync<RegisterDto>("/api/account/Register", RegisterModel);
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var authResult = System.Text.Json.JsonSerializer.Deserialize<AuthResponseDto>(content, new System.Text.Json.JsonSerializerOptions
                {
                    PropertyNamingPolicy = System.Text.Json.JsonNamingPolicy.CamelCase
                });
                AuthenticationState.LoadState(authResult);
                _navManager.NavigateTo("/chat");
            }
            else
            {
                string? errorContent = null;
                try
                {
                    errorContent = await response.Content.ReadAsStringAsync();
                }
                catch
                {
                }
                if (string.IsNullOrWhiteSpace(errorContent))
                {
                    errorContent = $"Error {response.StatusCode} - ${response.ReasonPhrase}";
                }
                _isBusy = false;
                errorMessage = errorContent;
            }
        }
        catch (Exception)
        {

            throw;
        }
    }







    //public RegisterDto RegisterModel { get; set; } = new RegisterDto();

    //private bool _isBusy = false;
    //private string? errorMessage = null;

    //private async Task RegisterAsync()
    //{
    //    try
    //    {
    //        _isBusy = true;
    //        var response = await _accountService.Register(RegisterModel);
    //        if (response)
    //        {
    //            _navManager.NavigateTo("/chat");
    //        }
    //        else
    //        {
    //            errorMessage = $"Something went wrong";
    //            _isBusy = false;
    //        }

    //    }
    //    catch (Exception ex)
    //    {
    //        errorMessage = ex.Message;
    //        _isBusy = false;
    //    }
    //}
}