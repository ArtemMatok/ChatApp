@page "/chat"
@inject NavigationManager _navManager
@implements IAsyncDisposable
@using TestChat.Shared.Chat 
@inject IJSRuntime JsRuntime
@inject HttpClient _httpClient
@using System.Net.Http.Headers
@inject IUserService _userService
@using System.IdentityModel.Tokens.Jwt 


<div class="container-fluid">
    <div class="card br-0 mt-1" >
        <div class="card-header bg-danger text-white">
            <div class="row">
                <div class="col"></div>
                <div class="col">
                    <button type="submit" class="btn btn-warning float-end" @onclick="HandleLogout">Logout</button>
                    <label class="float-end me-2 mt-2 topbar-name">Welcome @AuthState?.User?.Name</label>                </div>
            </div>
        </div>
        <div class="card-body messages-window bg-light d-flex">
            <div class="row" style="flex: 1">
                <div class="col-sm-3 col-3">

                    <ChatsList Loading="_loadingUsers" Chats="Chats" OnUserSelected="OnUserSelected" />
                </div>
                @*<div class="col-sm-8 col-6 d-flex justify-content-center align-items-center" style="background-color: #f4ecff; height:70vh;">*@
                <div class="col-sm-6 col-6 d-flex px-0" style="height:70vh;">

                    <ChatDetail NewIncomingMessage="@_newIncomingMessage"
                                OnIncomingMessageReceived="()=>_newIncomingMessage = null"
                                SelectedUser="_selectedUser" 
                                OnCancel="HandleChatDetailsCancel"  />

                </div>
                <div class="col-sm-3 col-3">
                    User
                    <UserListComponent Users="Users" Loading="_loadingUsers" OnUserSelected="OnUserSelected" />
                </div>
            </div>
           
        </div>
    </div>
</div>


@code {
    [CascadingParameter(Name = "AuthenticationState")]
    public AuthenticationState AuthState { get; set; }
    public ICollection<UserDto> Users { get; set; } = new HashSet<UserDto>();
    public IList<UserDto> Chats { get; set; } = new List<UserDto>();



    private HubConnection? _hubConnection;
    private UserDto? _selectedUser = null;
    private bool _loadingUsers = false;
    private MessageDto? _newIncomingMessage = null;

    private async Task<bool> IsTokenExpired()
    {
        var jwt = new JwtSecurityToken(AuthState.Token); ;
        if (jwt.ValidTo <= DateTime.Now)
        {
            //Token has expired
            //Navigate to login page

            await HandleLogout();
            return true;
        }
        return false;
    }


    protected override async void OnInitialized()
    {


        base.OnInitialized();
        if (!AuthState.IsAuthenticated)
        {
            _navManager.NavigateTo("/");
        }
        else
        {
            if(!await IsTokenExpired())
            {
                _hubConnection = ConfigureHubConnection();

                _loadingUsers = true;
                var userListTask = GetClient().GetFromJsonAsync<ICollection<UserDto>>("/api/User/GetUsers", TestChat.Shared.Helpers.JsonConverter.JsonSerializerOptions);
                var chatListTask = await _userService.GetUsersChats();


                await _hubConnection.StartAsync();

                var userList = await userListTask;
                if (userList is not null)
                {
                    Users = userList;
                }

                var chatsList = chatListTask;
                if (chatsList is not null)
                {
                    Chats = chatsList;
                }
                _loadingUsers = false;
                await _hubConnection.SendAsync(nameof(IBlazingChatHubServer.SetUserOnline), AuthState.User);
                StateHasChanged();
            }


        }


    }


    private HttpClient GetClient()
    {
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", AuthState.Token);
        return _httpClient;
    }

    private HubConnection ConfigureHubConnection()
    {
        var hubConnection = new HubConnectionBuilder()
            .WithUrl(_navManager.ToAbsoluteUri("/hub/blazing-chat"),
            options=>options.AccessTokenProvider = ()=>Task.FromResult(AuthState.Token))
            .Build();



        hubConnection.On<UserDto>(nameof(IBlazingChatHubClient.UserConnected), (newUser) =>
        {
            Users.Add(newUser);
            StateHasChanged();
        });


        hubConnection.On<ICollection<UserDto>>(nameof(IBlazingChatHubClient.OnlineUsersList), (onlineUsers) =>
        {
            foreach (var item in Users)
            {
                if(onlineUsers.Any(x=>x.Id == item.Id))
                {
                    item.IsOnline = true;
                }
            }
            StateHasChanged();
        });

        hubConnection.On<int>(nameof(IBlazingChatHubClient.UserIsOnline), (userId) =>
        {
            var user = Users.FirstOrDefault(x => x.Id == userId);
            if(user is not null)
            {
                user.IsOnline = true;
                StateHasChanged();
            }
        });


        hubConnection.On<MessageDto>(nameof(IBlazingChatHubClient.MessageReceived), (messageDto) =>
        {
            var fromUser = Users.FirstOrDefault(x => x.Id == messageDto.FromUserId);
            if (!Chats.Any(x=>x.Id == messageDto.FromUserId))
            {
                Chats.Insert(0, fromUser);
                //Chats.Prepend(fromUser);
            }
            else
            {
                if(_selectedUser.Id == messageDto.FromUserId)
                {
                    int index = Chats.IndexOf(_selectedUser);
                    if (index != -1) // Якщо елемент знайдено
                    {
                        // Видалити елемент зі списку
                        Chats.RemoveAt(index);
                        // Вставити елемент на початок списку
                        Chats.Insert(0, _selectedUser);
                    }
                    
                    // Append the message to the messages list
                    _newIncomingMessage = messageDto;
                }
            }
            StateHasChanged();
        });

        return hubConnection;
    }

    public async ValueTask DisposeAsync()
    {
        if(_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }


    private async Task OnUserSelected(UserDto user)
    {
        _selectedUser = user;

        var selectedChatUser = Chats.FirstOrDefault(x => x.IsSelected);
        if(selectedChatUser is not null)
        {
            selectedChatUser.IsSelected = false;
        }

        var chatUser = Chats.FirstOrDefault(x => x.Id == user.Id);
        if(chatUser is null)
        {
            user.IsSelected = true;
            Chats.Add(user);
        }
        else
        {
            chatUser.IsSelected = true;
        }


    }

    private async Task HandleLogout()
    {
        await JsRuntime.InvokeVoidAsync("window.removeFromStorage", AuthenticationState.AuthStoreKey);
        AuthState.UnloadState();
        _navManager.NavigateTo("/");
    }


    private async Task HandleChatDetailsCancel(bool shouldRemoveFromChatList)
    {
        if(shouldRemoveFromChatList)
        {
            Chats.Remove(_selectedUser);
            _selectedUser = null;
        }
    }
}
