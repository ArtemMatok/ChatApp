@page "/chat"
@inject NavigationManager _navManager
@implements IAsyncDisposable
@using TestChat.Shared.Chat 
@inject IJSRuntime JsRuntime
@inject HttpClient _httpClient
@using System.Net.Http.Headers

<div class="container-fluid">
    <div class="card br-0 mt-5" >
        <div class="card-header bg-danger text-white">
            <div class="row">
                <div class="col"></div>
                <div class="col">
                    <button type="submit" class="btn btn-warning float-end" @onclick="HandleLogout">Logout</button>
                    <label class="float-end me-2 mt-2">Welcome @AuthState.User.Name</label>
                </div>
            </div>
        </div>
        <div class="card-body messages-window">
            <div class="row">
                <div class="col-sm-2 col-3">
                    @*User*@
                    <ChatsList  OnUserSelected="OnUserSelected" />
                </div>
                <div class="col-sm-8 col-6">
                    @*Chat Message Window*@
                    <ChatDetail SelectedUser="_selectedUser" />
                    
                </div>
                <div class="col-sm-2 col-3">
                    @*User*@
                    <UserListComponent Users="Users" Loading="_loadingUsers" OnUserSelected="OnUserSelected" />
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [CascadingParameter(Name = "AuthenticationState")]
    public AuthenticationState AuthState { get; set; }
    public ICollection<UserDto> Users { get; set; } = new HashSet<UserDto>();



    private HubConnection? _hubConnection;
    private UserDto? _selectedUser = null;
    private bool _loadingUsers = false;


    protected override async void OnInitialized()
    {
        base.OnInitialized();
        if (!AuthState.IsAuthenticated)
        {
            _navManager.NavigateTo("/");
        }
        else
        {
            _hubConnection = ConfigureHubConnection();

            _loadingUsers = true;
            var userListTask = GetClient().GetFromJsonAsync<ICollection<UserDto>>("/api/User/GetUsers", TestChat.Client.Helpers.JsonConverter.JsonSerializerOptions);


            await _hubConnection.StartAsync();

            var userList = await userListTask;
            if(userList is not null)
            {
                Users = userList;
            }
            _loadingUsers = false;
            await _hubConnection.SendAsync(nameof(IBlazingChatHubServer.SetUserOnline), AuthState.User);
            StateHasChanged();
        }


    }


    private HttpClient GetClient()
    {
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", AuthState.Token);
        return _httpClient;
    }

    private HubConnection ConfigureHubConnection()
    {
        var hubConnection = new HubConnectionBuilder()
            .WithUrl(_navManager.ToAbsoluteUri("/hub/blazing-chat"),
            options=>options.AccessTokenProvider = ()=>Task.FromResult(AuthState.Token))
            .Build();



        hubConnection.On<UserDto>(nameof(IBlazingChatHubClient.UserConnected), (newUser) =>
        {
            Users.Add(newUser);
            StateHasChanged();
        });


        hubConnection.On<ICollection<UserDto>>(nameof(IBlazingChatHubClient.OnlineUsersList), (onlineUsers) =>
        {
            foreach (var item in Users)
            {
                if(onlineUsers.Any(x=>x.Id == item.Id))
                {
                    item.IsOnline = true;
                }
            }
            StateHasChanged();
        });

        hubConnection.On<int>(nameof(IBlazingChatHubClient.UserIsOnline), (userId) =>
        {
            var user = Users.FirstOrDefault(x => x.Id == userId);
            if(user is not null)
            {
                user.IsOnline = true;
                StateHasChanged();
            }
        });


        return hubConnection;
    }

    public async ValueTask DisposeAsync()
    {
        if(_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }


    private async Task OnUserSelected(UserDto user) => _selectedUser = user;

    private async Task HandleLogout()
    {
        await JsRuntime.InvokeVoidAsync("window.removeFromStorage", AuthenticationState.AuthStoreKey);
        AuthState.UnloadState();
        _navManager.NavigateTo("/");
    }
}
