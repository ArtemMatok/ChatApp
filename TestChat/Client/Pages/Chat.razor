@page "/chat"
@inject NavigationManager _navManager
@implements IAsyncDisposable
@using TestChat.Shared.Chat 


<div class="container">
    <div class="card">
        <div class="card-header bg-danger text-white">
            <div class="row">
                <div class="col"></div>
                <div class="col">
                    <button type="submit" class="btn btn-warning float-end">Logout</button>
                    <label class="float-end me-2 mt-2">Welcome @AuthState.Name</label>
                </div>
            </div>
        </div>
        <div class="card-body messages-window">
            <div class="row">
                <div class="col-3">
                    @*User*@
                    <UserListComponent  Users="Users" OnUserSelected="OnUserSelected"/>
                    
                 </div>
                <div class="col-9">
                    @*Chat Message Window*@
                   <ChatMessages SelectedUser="_selectedUser"/>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [CascadingParameter(Name = "AuthenticationState")]
    public AuthenticationState AuthState { get; set; }
    private HubConnection? _hubConnection;
    public ICollection<UserDto> Users { get; set; } = new HashSet<UserDto>();
    private UserDto? _selectedUser = null;




    protected override async void OnInitialized()
    {
        base.OnInitialized();
        if (!AuthState.IsAuthenticated)
        {
            _navManager.NavigateTo("/");
        }
        else
        {

            _hubConnection = ConfigureHubConnection();


            await _hubConnection.StartAsync();
            await _hubConnection.SendAsync(nameof(IBlazingChatHubServer.ConnectUser), AuthState.Name);
        }


    }

    private HubConnection ConfigureHubConnection()
    {
        var hubConnection = new HubConnectionBuilder()
            .WithUrl(_navManager.ToAbsoluteUri("/hub/blazing-chat"))
            .Build();

        hubConnection.On<UserDto>(nameof(IBlazingChatHubClient.UserConnected), (userName) =>
        {
            Users.Add(userName);
            StateHasChanged();
        });


        hubConnection.On<ICollection<UserDto>>(nameof(IBlazingChatHubClient.ConnectedUsersList), (userNames) =>
        {
            Users = userNames;
            StateHasChanged();
        });


        return hubConnection;
    }

    public async ValueTask DisposeAsync()
    {
        if(_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }


    private async Task OnUserSelected(UserDto user) => _selectedUser = user;
}
