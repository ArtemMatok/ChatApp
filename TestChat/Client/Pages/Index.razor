@page "/"
@inject HttpClient _httpClient
@inject IJSRuntime JsRuntime
@inject NavigationManager _navManager
@using BlazorBootstrap


    <div class="container @className" id="container">
        <div class="form-container sign-up">
            <EditForm Model="RegisterModel" OnValidSubmit="()=>ShowSpinnerAsync(SpinnerColor.Light)">
                <DataAnnotationsValidator />
                @if (!string.IsNullOrWhiteSpace(errorMessageRegister))
                {
                    <p class="text-danger">@errorMessageRegister</p>
                }
                <h1 class="title-name">Create Account</h1>


                <InputText @bind-Value="RegisterModel.Name" DisplayName="Name" placeholder="Full Name"></InputText>
                <ValidationMessage For="()=>RegisterModel.Name" />
                <InputText @bind-Value="RegisterModel.UserName" DisplayName="UserName" placeholder="User Name"></InputText>
                <ValidationMessage For="()=>RegisterModel.UserName" />
                <InputText type="password" @bind-Value="RegisterModel.Password" DisplayName="Password" placeholder="Password"></InputText>
                <ValidationMessage For="()=>RegisterModel.Password" />
                <button type="submit">Register</button>
            </EditForm>
        </div>
        <div class="form-container sign-in">
            <EditForm Model="LoginModel" OnValidSubmit="()=>ShowSpinnerLoginAsync(SpinnerColor.Light)">
                <DataAnnotationsValidator />
                @if (!string.IsNullOrWhiteSpace(errorMessageLogin))
                {
                    <p class="text-danger">@errorMessageLogin</p>
                }
                <h1 class="title-name">Login</h1>


                <InputText @bind-Value="LoginModel.UserName" DisplayName="UserName" class="form-control" placeholder="Username"></InputText>
                <ValidationMessage For="()=>LoginModel.UserName" />
                <InputText type="password" @bind-Value="LoginModel.Password" DisplayName="Password" placeholder="Password"></InputText>
                <ValidationMessage For="()=>RegisterModel.Password" />
                <button type="submit">Login</button>
            </EditForm>
        </div>
        <div class="toggle-container ">
            <div class="toggle ">
                <div class="toggle-panel toggle-left">
                    <h1>Welcome Back!</h1>
                    <p>Enter your personal details to use all of site features</p>
                    <button @onclick="LoginClick" class="active" id="login">Sign In</button>
                </div>
                <div class="toggle-panel toggle-right">
                    <h1>Hello, Friend!</h1>
                    <p>Register with your personal details to use all of site features</p>
                    <button @onclick="RegisterClick" class="" id="register">Sign Up</button>
                </div>
            </div>
        </div>
    </div>

<Preload LoadingText="Loading..." />

    @code {
    



        private bool click = false;
        private string className => click == true ? "active" : "hidden";

        private void RegisterClick()
        {
            click = true;
            Console.WriteLine(className);
        }
        private void LoginClick()
        {
            click = false;
        }


        [CascadingParameter(Name = "AuthenticationState")]
        public AuthenticationState AuthenticationState { get; set; }

        #region Register
        private RegisterDto RegisterModel { get; set; } = new();
        private bool _isBusyRegister = false;
        private string? errorMessageRegister = null;

        #endregion

        #region Login
        private LoginDto LoginModel { get; set; } = new();
        private bool _isBusyLogin = false;
        private string? errorMessageLogin = null;

        #endregion

        #region Loading Register...
        [Inject] protected PreloadService PreloadServiceRegister { get; set; } = default!;

        private async Task ShowSpinnerAsync(SpinnerColor spinnerColor)
        {
            PreloadServiceRegister.Show(spinnerColor);

            try
            {
                errorMessageRegister = null;
                var response = await _httpClient.PostAsJsonAsync<RegisterDto>("/api/account/Register", RegisterModel);
                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    var authResult = JsonConverter.Deserialize<AuthResponseDto>(content);

                    var serialized = JsonConverter.Serialize(authResult);
                    await JsRuntime.InvokeVoidAsync("window.setToStorage", AuthenticationState.AuthStoreKey, serialized);
                    AuthenticationState.LoadState(authResult);

                }
                else
                {
                    string? errorContent = null;
                    try
                    {
                        errorContent = await response.Content.ReadAsStringAsync();
                    }
                    catch
                    {
                    }
                    if (string.IsNullOrWhiteSpace(errorContent))
                    {
                        errorContent = $"Error {response.StatusCode} - ${response.ReasonPhrase}";
                    }
                    _isBusyRegister = false;
                    errorMessageRegister = errorContent;
                }
            }
            catch (Exception)
            {

                throw;
            }

            PreloadServiceRegister.Hide();
        }
        #endregion

        #region Loading Login
        [Inject] protected PreloadService PreloadServiceLogin { get; set; } = default!;
        private async Task ShowSpinnerLoginAsync(SpinnerColor spinnerColor)
        {
            PreloadServiceLogin.Show(spinnerColor);
            try
            {

                errorMessageLogin = null;
                var response = await _httpClient.PostAsJsonAsync<LoginDto>("/api/account/Login", LoginModel);
                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    var authResult = JsonConverter.Deserialize<AuthResponseDto>(content);

                    var serialized = JsonConverter.Serialize(authResult);
                    await JsRuntime.InvokeVoidAsync("window.setToStorage", AuthenticationState.AuthStoreKey, serialized);
                    AuthenticationState.LoadState(authResult);

                }
                else
                {
                    string? errorContent = null;
                    try
                    {
                        errorContent = await response.Content.ReadAsStringAsync();
                    }
                    catch
                    {
                    }
                    if (string.IsNullOrWhiteSpace(errorContent))
                    {
                        errorContent = $"Error {response.StatusCode} - ${response.ReasonPhrase}";
                    }
                    _isBusyLogin = false;
                    errorMessageLogin = errorContent;
                }
            }
            catch (Exception)
            {

                throw;
            }


            PreloadServiceLogin.Hide();
        }
        #endregion
    }