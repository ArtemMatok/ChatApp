@page "/register"
@inject HttpClient _httpClient
@inject IJSRuntime JsRuntime
@*@using TestChat.Shared.DTOs
    @inject IAccountService _accountService
    @inject NavigationManager _navManager
    @inject HttpClient _httpClient
    @inject IJSRuntime JsRuntime

    <PageTitle>Register Blazing Chat</PageTitle>

    <div class="container">
        <div class="row">
            <div class="col"></div>
            <div class="col">
                <h2>Blazing Chat - Register</h2>
                <EditForm Model="RegisterModel" OnValidSubmit="RegisterAsync">
                    <DataAnnotationsValidator />
                    @if (!string.IsNullOrWhiteSpace(errorMessage))
                    {
                        <p class="text-danger">@errorMessage</p>
                    }
                    <div class="mb-3">
                        <InputText @bind-Value="RegisterModel.Name" DisplayName="Name" class="form-control" placeholder="Name"></InputText>
                        <ValidationMessage For="()=>RegisterModel.Name" />
                    </div>
                    <div class="mb-3">
                        <InputText @bind-Value="RegisterModel.UserName" DisplayName="UserName" class="form-control" placeholder="Username"></InputText>
                        <ValidationMessage For="()=>RegisterModel.UserName" />
                    </div>
                    <div class="mb-3">
                        <InputText type="password" @bind-Value="RegisterModel.Password" class="form-control" DisplayName="Password" placeholder="Password"></InputText>
                        <ValidationMessage For="()=>RegisterModel.Password" />
                    </div>
                    <div class="mb-3">
                        @if (_isBusy)
                        {
                            <button class="btn btn-success" type="button" disabled>
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span class="visually-hidden">Loading...</span>
                            </button>
                        }
                        else
                        {
                            <button type="submit" class="btn btn-success float-start">Register</button>
                        }
                        <NavLink Match="NavLinkMatch.All" href="/" class="btn btn-outline-primary float-end">Login</NavLink>
                        <div class="clearfix"></div>
                    </div>
                </EditForm>
            </div>
            <div class="col"></div>
        </div>
    </div>


    @code{

        [CascadingParameter(Name = "AuthenticationState")]
        public AuthenticationState AuthenticationState { get; set; }

        private RegisterDto RegisterModel { get; set; } = new();
        private bool _isBusy = false;
        private string? errorMessage = null;
        private async Task RegisterAsync()
        {
            try
            {
                _isBusy = true;
                errorMessage = null;
                var response = await _httpClient.PostAsJsonAsync<RegisterDto>("/api/account/Register", RegisterModel);
                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    var authResult =JsonConverter.Deserialize<AuthResponseDto>(content);

                    var serialized = JsonConverter.Serialize(authResult);
                    await JsRuntime.InvokeVoidAsync("window.setToStorage", AuthenticationState.AuthStoreKey, serialized);
                    AuthenticationState.LoadState(authResult);

                }
                else
                {
                    string? errorContent = null;
                    try
                    {
                        errorContent = await response.Content.ReadAsStringAsync();
                    }
                    catch
                    {
                    }
                    if (string.IsNullOrWhiteSpace(errorContent))
                    {
                        errorContent = $"Error {response.StatusCode} - ${response.ReasonPhrase}";
                    }
                    _isBusy = false;
                    errorMessage = errorContent;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }



    }*@





<div class="container @className" id="container">
    <div class="form-container sign-up">
        <EditForm Model="RegisterModel" OnValidSubmit="RegisterAsync">
            <DataAnnotationsValidator />
            @if (!string.IsNullOrWhiteSpace(errorMessageRegister))
            {
                <p class="text-danger">@errorMessageRegister</p>
            }
            <h1 class="title-name">Create Account</h1>


            <InputText @bind-Value="RegisterModel.Name" DisplayName="Name" placeholder="Full Name"></InputText>
            <ValidationMessage For="()=>RegisterModel.Name" />
            <InputText @bind-Value="RegisterModel.UserName" DisplayName="UserName" placeholder="User Name"></InputText>
            <ValidationMessage For="()=>RegisterModel.UserName" />
            <InputText type="password" @bind-Value="RegisterModel.Password" DisplayName="Password" placeholder="Password"></InputText>
            <ValidationMessage For="()=>RegisterModel.Password" />
            <button type="submit">Sign Up</button>
        </EditForm>
    </div>
    <div class="form-container sign-in">
        <EditForm Model="LoginModel" OnValidSubmit="LoginAsync">
            <DataAnnotationsValidator />
            @if (!string.IsNullOrWhiteSpace(errorMessageLogin))
            {
                <p class="text-danger">@errorMessageLogin</p>
            }
            <h1 class="title-name">Login</h1>


            <InputText @bind-Value="LoginModel.UserName" DisplayName="UserName" class="form-control" placeholder="Username"></InputText>
            <ValidationMessage For="()=>LoginModel.UserName" />
            <InputText type="password" @bind-Value="LoginModel.Password" DisplayName="Password" placeholder="Password"></InputText>
            <ValidationMessage For="()=>RegisterModel.Password" />
            <button type="submit">Login</button>
        </EditForm>
    </div>
    <div class="toggle-container ">
        <div class="toggle ">
            <div class="toggle-panel toggle-left">
                <h1>Welcome Back!</h1>
                <p>Enter your personal details to use all of site features</p>
                <button @onclick="LoginClick" class="active" id="login">Sign In</button>
            </div>
            <div class="toggle-panel toggle-right">
                <h1>Hello, Friend!</h1>
                <p>Register with your personal details to use all of site features</p>
                <button @onclick="RegisterClick" class="" id="register">Sign Up</button>
            </div>
        </div>
    </div>
</div>

@code {
    private bool click = false;
    private string className => click == true ? "active" : "hidden";

    private void RegisterClick()
    {
        click = true;
        Console.WriteLine(className);
    }
    private void LoginClick()
    {
        click = false;
    }


    [CascadingParameter(Name = "AuthenticationState")]
    public AuthenticationState AuthenticationState { get; set; }

    #region Register
    private RegisterDto RegisterModel { get; set; } = new();
    private bool _isBusyRegister = false;
    private string? errorMessageRegister = null;
    private async Task RegisterAsync()
    {

        try
        {
            _isBusyRegister = true;
            errorMessageRegister = null;
            var response = await _httpClient.PostAsJsonAsync<RegisterDto>("/api/account/Register", RegisterModel);
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var authResult = JsonConverter.Deserialize<AuthResponseDto>(content);

                var serialized = JsonConverter.Serialize(authResult);
                await JsRuntime.InvokeVoidAsync("window.setToStorage", AuthenticationState.AuthStoreKey, serialized);
                AuthenticationState.LoadState(authResult);

            }
            else
            {
                string? errorContent = null;
                try
                {
                    errorContent = await response.Content.ReadAsStringAsync();
                }
                catch
                {
                }
                if (string.IsNullOrWhiteSpace(errorContent))
                {
                    errorContent = $"Error {response.StatusCode} - ${response.ReasonPhrase}";
                }
                _isBusyRegister = false;
                errorMessageRegister = errorContent;
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    #endregion

    #region Login
    private LoginDto LoginModel { get; set; } = new();
    private bool _isBusyLogin = false;
    private string? errorMessageLogin = null;
    private async Task LoginAsync()
    {
        try
        {
            _isBusyLogin = true;
            errorMessageLogin = null;
            var response = await _httpClient.PostAsJsonAsync<LoginDto>("/api/account/Login", LoginModel);
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var authResult = JsonConverter.Deserialize<AuthResponseDto>(content);

                var serialized = JsonConverter.Serialize(authResult);
                await JsRuntime.InvokeVoidAsync("window.setToStorage", AuthenticationState.AuthStoreKey, serialized);
                //_navManager.NavigateTo("/chat");
                AuthenticationState.LoadState(authResult);

            }
            else
            {
                string? errorContent = null;
                try
                {
                    errorContent = await response.Content.ReadAsStringAsync();
                }
                catch
                {
                }
                if (string.IsNullOrWhiteSpace(errorContent))
                {
                    errorContent = $"Error {response.StatusCode} - ${response.ReasonPhrase}";
                }
                _isBusyLogin = false;
                errorMessageLogin = errorContent;
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    #endregion
}